#!/usr/bin/env ruby
# git-checkout-new-issue

# 20230705
# 0.1.0

# Notes:
# 1. .env.development.local is expected to be left out of the repo, so that each dev is able to create their own keys.
# 2. Jira only for now.

require 'active_support/core_ext/string'
require 'dotenv'
require 'httparty'
require 'json'

ISSUE_TYPES = %w{Bug Epic Story Task}

def dot_env_path
  File.expand_path('../../.env.development.local', __FILE__)
end

def load_env
  Dotenv.load(dot_env_path)
end

def email_address
  abort "EMAIL_ADDRESS is missing from .env.development.local." unless ENV['EMAIL_ADDRESS']
  ENV['EMAIL_ADDRESS']
end

def jira_api_key
  abort "JIRA_API_KEY is missing from .env.development.local." unless ENV['JIRA_API_KEY']
  ENV['JIRA_API_KEY']
end

def jira_domain
  abort "JIRA_DOMAIN is missing from .env.development.local." unless ENV['JIRA_DOMAIN']
  ENV['JIRA_DOMAIN']
end

def project_key
  abort "JIRA_PROJECT_KEY is missing from .env.development.local." unless ENV['JIRA_PROJECT_KEY']
  ENV['JIRA_PROJECT_KEY']
end

def issue_type
  issue_type_candidate = ARGV.first.titlecase
  if ISSUE_TYPES.include?(issue_type_candidate)
    ARGV.shift
    issue_type_candidate
  else
    'Task'
  end
end

def issue_summary
  ARGV.join(' ')
end

def body
  issue_type = self.issue_type # Ensure this is run first.
  {
    fields: {
      project: {
        key: project_key
      },
      issuetype: {
        name: issue_type
      },
      summary: issue_summary
    }
  }
end

def auth
  Base64.strict_encode64("#{email_address}:#{jira_api_key}")
end

def headers
  {
    "Authorization" => "Basic #{auth}",
    "Content-Type" => "application/json"
  }
end

def create_issue
  HTTParty.post("https://#{jira_domain}.atlassian.net/rest/api/3/issue",
    body: body.to_json,
    headers: headers,
    verify: false
  )
end

def branch_label
  issue_summary.downcase.split(' ').join('_')
end

def branch_name(issue)
  "#{issue["key"]}_#{branch_label}"
end

def command_string(issue)
  "git checkout -b #{branch_name(issue)}"
end

def create_branch(issue)
  system(command_string(issue))
end

def main
  load_env
  issue = create_issue
  create_branch(issue)
end

main
